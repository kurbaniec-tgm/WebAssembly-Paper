@online{ wiki:syt,
	title = {Systemtechnik},
	author = {Wikipedia Autoren},
	url = {https://de.wikipedia.org/wiki/Systemtechnik},
	organization = {Wikipedia},
	note = {29.10.2019}
}

@online{ stackoverflow:survey,
    title={Stack Overflow Developer Survey 2019}, url={https://insights.stackoverflow.com/survey/2019#most-popular-technologies}, 
    organization = {Stack Overflow},
	note = {29.10.2019}
}

@online{ js:history,
    title={A Brief History of JavaScript},
    author = {Sebastian Peyrott},
    url={https://auth0.com/blog/a-brief-history-of-javascript/}, 
    organization = {Auth0},
    year={2017},
	note = {29.10.2019}
}

@online{ javaapplet:history,
    title={Where did Java go wrong on the client?},
    url={https://softwareengineering.stackexchange.com/q/21843}, 
    organization = {StackExchange},
    year={2010},
	note = {29.10.2019}
}

@online{ wasm:basics,
    title={WebAssembly - Overview},
    url={https://webassembly.org/}, 
    organization = {Mozilla Corporation, W3C Community Group, W3C Working Group},
	note = {29.10.2019}
}

@online{ wasm:support,
    title={WebAssembly support now shipping in all major browsers},
    url={https://blog.mozilla.org/blog/2017/11/13/webassembly-in-browsers/}, 
    year={2017},
    organization = {Mozilla Corporation},
	note = {29.10.2019}
}

@online{ wasm:build,
    title={Small WebAssembly Binaries with Rust + Emscripten},
    author={Alon Zakai},
    url={https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html}, 
    year={2018},
	note = {29.10.2019}
}

@online{ wasm:performance,
    title={WebAssembly vs. the world. Should you use WebAssembly?},
    author={Vladimir},
    url={https://blog.sqreen.com/webassembly-performance/}, 
    year={2018},
	note = {29.10.2019}
}




@article{ wasm:revolution,
 author = {M{\o}ller, Anders},
 title = {Technical Perspective: WebAssembly: A Quiet Revolution of the Web},
 journal = {Commun. ACM},
 issue_date = {December 2018},
 volume = {61},
 number = {12},
 month = nov,
 year = {2018},
 issn = {0001-0782},
 pages = {106--106},
 numpages = {1},
 url = {http://doi.acm.org/10.1145/3282508},
 doi = {10.1145/3282508},
 acmid = {3282508},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@online{ wasm:howandwhy,
    journal = {LogRocket.com},
    year = {2018},
    title = {WebAssembly: How and why},
    language = {eng},
    author = {Milica Mihajlija},
    url = {https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71/}
}





@article{ wasm:explanation,
abstract = {WebAssembly has been designed with a number of performance-intensive, browser-based use cases in mind: games, music streaming, video editing, CAD, encryption, and image recognition, to name just a few. WebAssembly is closer to the intermediate representation (IR) generated by the LLVM language-compiler infrastructure, than it is like C or Java. [...]most scenarios for working with WebAssembly involve writing code in a high-level language and turning that into WebAssembly. Bulk memory operations and SIMD Bulk memory operations and SIMD (single instruction, multiple data) parallelism are must-haves for applications that grind through piles of data and need native CPU acceleration to keep from choking, like machine learning or scientific apps.},
journal = {InfoWorld.com},
publisher = {Infoworld Media Group},
year = {2018},
title = {What is WebAssembly? The next-generation web platform explained},
language = {eng},
address = {San Mateo},
author = {Yegulalp, Serdar},
keywords = {Web Browsers ; Language ; Software ; Programming Languages ; Sanitation Services ; Java ; C Plus Plus ; Interpreters},
url = {http://search.proquest.com/docview/2081195409/},
}

@online{ llvm:explanation,
    journal = {InfoWorld.com},
    publisher = {Infoworld Media Group},
    year = {2018},
    title = {What is LLVM? The power behind Swift, Rust, Clang, and more},
    language = {eng},
    author = {Yegulalp, Serdar},
    url = {https://www.infoworld.com/article/3247799/what-is-llvm-the-power-behind-swift-rust-clang-and-more.html}
}